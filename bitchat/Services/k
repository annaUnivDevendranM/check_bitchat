# k.py

"""
End-to-End Encryption Key Registry

This module can be used to store and verify device keys for chat members.
"""

from typing import List, Dict

class MemberKey:
    def __init__(self, owner: str, device_id: str, key: str):
        self.owner = owner
        self.device_id = device_id
        self.key = key

    def __repr__(self):
        return f"<MemberKey owner={self.owner} device_id={self.device_id} key={self.key}>"

class KeyRegistry:
    def __init__(self):
        self.keys: List[MemberKey] = []

    def add_key(self, owner: str, device_id: str, key: str):
        self.keys.append(MemberKey(owner, device_id, key))

    def get_keys_by_owner(self, owner: str) -> List[MemberKey]:
        return [k for k in self.keys if k.owner == owner]

    def verify_key(self, owner: str, device_id: str, key: str) -> bool:
        return any(k.owner == owner and k.device_id == device_id and k.key == key for k in self.keys)

# Example usage:
if __name__ == "__main__":
    registry = KeyRegistry()
    registry.add_key(
        "James Bailey",
        "Device1",
        "05 9A F7 2A 13 08 AD 56 60 22 55 8E 0F 81 DF 63 12 E0 65 86 1D 51 57 C2 1C 96 5A B6 95 35 45 E1 73"
    )
    registry.add_key(
        "James Bailey",
        "Device2",
        "05 B6 0F A9 76 7B F0 92 1B F1 14 64 6E DF 30 0F 97 B9 AC AC D3 83 A0 10 FA 3C 15 00 92 A5 A0 AF 0A"
    )
    registry.add_key(
        "James Bailey",
        "Device3",
        "05 67 86 A9 74 45 91 99 18 D2 25 A0 8E 4A 95 32 B9 8F E2 80 8B 6A DD CC 12 2B 8C 15 0E 40 AD 3F 36"
    )

    # Verify a key
    print(registry.verify_key(
        "James Bailey",
        "Device1",
        "05 9A F7 2A 13 08 AD 56 60 22 55 8E 0F 81 DF 63 12 E0 65 86 1D 51 57 C2 1C 96 5A B6 95 35 45 E1 73"
    ))  # True